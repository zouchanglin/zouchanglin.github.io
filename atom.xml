<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tim&#39;s Blog</title>
  
  <subtitle>一枚野生程序员~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zouchanglin.cn/"/>
  <updated>2020-12-13T11:04:50.000Z</updated>
  <id>https://zouchanglin.cn/</id>
  
  <author>
    <name>Tim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高效易用的IO库【Okio应用篇】</title>
    <link href="https://zouchanglin.cn/9128.html"/>
    <id>https://zouchanglin.cn/9128.html</id>
    <published>2020-12-12T15:58:23.000Z</published>
    <updated>2020-12-13T11:04:50.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp是Android中包含的功能强大的HTTP客户端，此框架平时用的还挺多的，但是今天的主角是OkHttp的低层IO库——Okio，Okio是对java.io和java.nio的补充，使访问、存储和处理数据变得更加容易。 这里是它的官网：&lt;a href=&quot;https://square.github.io/okio/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://square.github.io/okio/&lt;/a&gt; ， 最开始它作为OKHttp的一个组件，现在可以独立使用它来解决一些IO问题，接下来的内容来自对Okio官网的文档以及一些代码示例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="高性能网络" scheme="https://zouchanglin.cn/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="序列化" scheme="https://zouchanglin.cn/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="IO" scheme="https://zouchanglin.cn/tags/IO/"/>
    
      <category term="Stream" scheme="https://zouchanglin.cn/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>Android Socket与HTTPS校验</title>
    <link href="https://zouchanglin.cn/64846.html"/>
    <id>https://zouchanglin.cn/64846.html</id>
    <published>2020-12-11T14:04:00.000Z</published>
    <updated>2020-12-11T14:08:26.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Android中使用HTTPS的场景比较频繁，所以对于HTTPS的证书应该如何校验呢？关于HTTPS的校验原理可以参考我之前写的一篇文章：&lt;a href=&quot;https://zouchanglin.cn/2020/02/25/1436780387.html&quot;&gt;《 HTTPS协议实现原理 》&lt;/a&gt;，相信看完后应该对HTTPS有一个比较大致的了解。而且对HTTP(s)请求的工具进行了封装，需要体会这种封装工具类的思路，也就是编码中常见的Listener机制。然后是Android中TCP、UDP通信的例子，主要是把Android设备作为Client端，如果对Java的Socket编程比较熟悉的话，这些都是特别简单的示例程序，非常容易看懂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="网络安全" scheme="https://zouchanglin.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="设计模式" scheme="https://zouchanglin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>探究ContentProvider</title>
    <link href="https://zouchanglin.cn/24594.html"/>
    <id>https://zouchanglin.cn/24594.html</id>
    <published>2020-12-09T14:48:30.000Z</published>
    <updated>2020-12-09T15:00:22.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为什么微信、QQ、淘宝等App都能访问联系人(通讯录)呢？是因为Android存在一种应用之间的数据共享机制，即ContentProvider，ContentProvider作为Android四大组件之一，为存储和获取数据提供统一的接口，可以在不同的应用程序之间共享数据。对于ContentProvier而言，无论数据的来源是什么，它都认为是种表（同时也支持文件数据，只是表格形式用得比较多），然后把数据组织成表格返回给使用者。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="服务解耦" scheme="https://zouchanglin.cn/tags/%E6%9C%8D%E5%8A%A1%E8%A7%A3%E8%80%A6/"/>
    
      <category term="IPC通信" scheme="https://zouchanglin.cn/tags/IPC%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>远程服务使用AIDL通信</title>
    <link href="https://zouchanglin.cn/35923.html"/>
    <id>https://zouchanglin.cn/35923.html</id>
    <published>2020-12-08T16:17:00.000Z</published>
    <updated>2020-12-08T16:26:32.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Android 中，一个进程通常无法访问另一个进程的内存。因此为了进程间通信，Android提供了AIDL机制，AIDL是Android中IPC（Inter-Process Communication）方式中的一种，AIDL是Android Interface definition language的缩写，AIDL的作用是可以在自己的App里绑定一个其他App的Service，这样App可以通过AIDL与其他App进行交互。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="消息通信" scheme="https://zouchanglin.cn/tags/%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>后台默默的劳动者，探究服务</title>
    <link href="https://zouchanglin.cn/53372.html"/>
    <id>https://zouchanglin.cn/53372.html</id>
    <published>2020-12-07T16:36:12.000Z</published>
    <updated>2020-12-08T01:50:12.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;服务作为Android四大组件之一，是一种可在后台执行长时间运行操作而不提供界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。需要注意的是服务并不会自动开启线程，所有的代码都是默认运行在主线程当中的，所以需要在服务的内部手动创建子线程，并在这里执行具体的任务，否则就有可能出现主线程被阻塞住的情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="异步" scheme="https://zouchanglin.cn/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Application全局应用</title>
    <link href="https://zouchanglin.cn/12540.html"/>
    <id>https://zouchanglin.cn/12540.html</id>
    <published>2020-12-07T03:10:00.000Z</published>
    <updated>2020-12-07T09:18:04.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Application是维护应用全局状态的基类，Android系统会在启动应用进程时创建一个对应的Application对象。所以当我们需要创建全局变量的时候，不需要再像Java那样需要创建public权限的static变量，而直接在Application中去实现。其他组件只需要调用Context的getApplicationContext或者getApplication(在Activity中)来获得一个Application对象，再做出相应的处理。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="组件通信" scheme="https://zouchanglin.cn/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>全局大喇叭——BroadcastReceiver</title>
    <link href="https://zouchanglin.cn/17555.html"/>
    <id>https://zouchanglin.cn/17555.html</id>
    <published>2020-12-04T04:10:00.000Z</published>
    <updated>2020-12-04T06:30:14.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章记述了Android的四大组件之一 —— BroadcastReceiver（广播接收者）。广播的作用、广播注册的方式、自定义广播、广播的类型以及在较新的Android系统中使用BroadcastReceiver需要注意的问题。Android 应用与 Android 系统和其他 Android 应用之间可以相互收发广播消息，这与发布-订阅设计模式相似，这些广播会在所关注的事件发生时发送出去。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="消息通信" scheme="https://zouchanglin.cn/tags/%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>SQLite原理与运用</title>
    <link href="https://zouchanglin.cn/43941.html"/>
    <id>https://zouchanglin.cn/43941.html</id>
    <published>2020-12-03T04:10:00.000Z</published>
    <updated>2020-12-03T09:46:22.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;SQLite是一个开源的关系型数据库，实现自包容、零配置、支持事务的SQL数据库引擎。其特点是高度便携、使用方便、结构紧凑、高效、可靠。并且SQLite是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。 本篇文章书要是记述了SQLite的基本架构以及SQLite的几种操作方式，其中比较重要的就是ADB Shell命令操作与SQL语句，另外在开发中还是Litepal这款开源ORM框架用的比较多一些，使用起来确实非常方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="ORM框架" scheme="https://zouchanglin.cn/tags/ORM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SQLite" scheme="https://zouchanglin.cn/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>SharedPreference与文件存储</title>
    <link href="https://zouchanglin.cn/41105.html"/>
    <id>https://zouchanglin.cn/41105.html</id>
    <published>2020-12-02T10:10:00.000Z</published>
    <updated>2020-12-09T14:15:24.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Android常用数据存储方式有SharedPreferences存储数据(虽然还是属于内部存储)、文件存储（内部，外部)、SQLite数据库存储、ContentProvider存储数据、网络存储数据等几种。本篇博客主要是介绍Shared Preference的原理与使用，区分内部与外部文件存储，以及它们的使用方式。那就从清除缓存与清除数据到底清除了什么这个问题开始吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="存储" scheme="https://zouchanglin.cn/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="权限" scheme="https://zouchanglin.cn/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Android屏幕适配</title>
    <link href="https://zouchanglin.cn/13324.html"/>
    <id>https://zouchanglin.cn/13324.html</id>
    <published>2020-11-29T16:21:30.000Z</published>
    <updated>2020-12-01T12:17:22.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于Android系统的开放性，任何用户、开发商、OEM厂商、运营商都可以对Android进行定制，修改成他们想要的样子，导致碎片化严重。Android手机的分辨率和尺寸千奇百怪，同样的软件在不同的手机上UI表现难以达到一致的效果，所以需要进行屏幕适配，针对不同的设备做一个比较统一的方案。先要搞清楚的问题就是什么是屏幕尺寸？什么是屏幕分辨率？什么是屏幕像素密度？还有开发中的各种单位的意义，关于屏幕适配的各种解决方案，布局适配与图片适配，在图片适配方案主要是记述了.9图的使用和制作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>手写一个Hexo评论系统（二）</title>
    <link href="https://zouchanglin.cn/53884.html"/>
    <id>https://zouchanglin.cn/53884.html</id>
    <published>2020-11-27T03:09:56.000Z</published>
    <updated>2020-11-29T08:18:52.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;接着上一篇文章&lt;a href=&quot;https://zouchanglin.cn/2020/11/26/16902.html&quot;&gt;《手写一个Hexo评论系统（一）》&lt;/a&gt;，本篇文章主要是讲述记述评论系统实现的一些具体的设计方案与技术细节，方便以后修改或者重构。还有项目的部署问题，包括域名解析，Nginx配置代理，云服务器选购的一些问题，选购服务器的坑是真的大，所以还是尽量选择大厂，稳定一点，好用一点就不用在乎多几那块钱嘛，而且根据自己的需要买配置还是比较划算的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="https://zouchanglin.cn/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringBoot" scheme="https://zouchanglin.cn/tags/SpringBoot/"/>
    
      <category term="博客" scheme="https://zouchanglin.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Vue" scheme="https://zouchanglin.cn/tags/Vue/"/>
    
      <category term="ElementUI" scheme="https://zouchanglin.cn/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>手写一个Hexo评论系统（一）</title>
    <link href="https://zouchanglin.cn/16902.html"/>
    <id>https://zouchanglin.cn/16902.html</id>
    <published>2020-11-25T22:21:30.000Z</published>
    <updated>2020-11-29T08:16:40.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我的个人博客时使用Hexo构建的，个人觉得使用Hexo非常方便，而且主题也很好看。因为我的Hexo仓库推送地址同时配置了Github和Gitee，所以一个hexo d命令便可以通知部署到 &lt;a href=&quot;https://zouchanglin.cn&quot;&gt;zouchanglin.cn&lt;/a&gt; 和 &lt;a href=&quot;https://zouchanglin.gitee.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zouchanglin.gitee.io&lt;/a&gt; 两个站点。唯一美中不足的就是Hexo缺少一款我比较满意的评论系统，所以决定自己手撸一个Hexo博客的评论系统，现在已经部署好了，去我的博客站点是可以看到效果的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="https://zouchanglin.cn/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringBoot" scheme="https://zouchanglin.cn/tags/SpringBoot/"/>
    
      <category term="博客" scheme="https://zouchanglin.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Vue" scheme="https://zouchanglin.cn/tags/Vue/"/>
    
      <category term="ElementUI" scheme="https://zouchanglin.cn/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>高级控件与屏幕适配</title>
    <link href="https://zouchanglin.cn/58995.html"/>
    <id>https://zouchanglin.cn/58995.html</id>
    <published>2020-11-18T16:21:30.000Z</published>
    <updated>2020-11-30T12:43:46.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要是记录一下高级控件ListView和CardView的使用方式和注意事项，虽然目前都已经用RecyclerView替代了ListView但是了解其中的原理和优化还是有必要的，关于ListView的原理和真正意义上的优化在后面会专门写一片文章来讲述，本篇只谈其具体使用与必须优化的方式。至于CardView其实用的还是比较多的，可以看到我的小Demo实现的效果还是很不错！最后涉及到了一些Android屏幕适配问题的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>UI片段——Fragment</title>
    <link href="https://zouchanglin.cn/20683.html"/>
    <id>https://zouchanglin.cn/20683.html</id>
    <published>2020-10-18T04:10:00.000Z</published>
    <updated>2020-11-19T15:40:18.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为什么需要Fragment？Fragment与Activity又是什么关系？Fragment的生命周期是怎样的？Fragment如何使用呢？其实Fragment是一种可以嵌入在活动中的UI片段，能够让程序更加合理和充分地利用大屏幕的空间，出现的初衷是为了适应大屏幕的平板电脑，可以将其看成一个小型Activity，又称作Activity碎片。下面来看看Fragment到底有哪些神奇之处吧 ~ &lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android对话框</title>
    <link href="https://zouchanglin.cn/50852.html"/>
    <id>https://zouchanglin.cn/50852.html</id>
    <published>2020-10-15T01:10:00.000Z</published>
    <updated>2020-11-03T01:11:30.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;消息提示机制，常用于向用户传递信息、提示或警告用户的行为。通用的方法有setTitle、setMessage、create、show。本片文章主要是简单对话框的使用，如何自定义对话框，如何使用PopupWindow进行弹框，以及如何对PopupWindow弹框加上动画效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="自定义UI" scheme="https://zouchanglin.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89UI/"/>
    
  </entry>
  
  <entry>
    <title>Android Menu</title>
    <link href="https://zouchanglin.cn/42452.html"/>
    <id>https://zouchanglin.cn/42452.html</id>
    <published>2020-10-14T04:10:00.000Z</published>
    <updated>2020-11-03T01:11:20.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文会介绍三种Menu，分别是Options Menu、Context Menu、Popup Menu的使用方式。&lt;/p&gt;
&lt;p&gt;Menu菜单是Android应用中非常重要且常见的组成部分，主要可以分为三类：选项菜单、上下文菜单/上下文操作模式以及弹出菜单。它们的主要区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项菜单：一个应用的主菜单项，用于放置对应用产生全局影响的操作，如搜索/设置。&lt;/li&gt;
&lt;li&gt;上下文菜单：用户长按某一元素时出现的浮动菜单。它提供的操作将影响所选内容，主要应用于列表中的每一项元素（如长按列表项弹出删除对话框）。上下文操作模式将在屏幕顶部栏（菜单栏）显示影响所选内容的操作选项，并允许用户选择多项，一般用于对列表类型的数据进行批量操作。&lt;/li&gt;
&lt;li&gt;弹出菜单：以垂直列表形式显示一系列操作选项，一般由某一控件触发，弹出菜单将显示在对应控件的上方或下方。它适用于提供与特定内容相关的大量操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过代码实际演示一下这三种菜单实际用法，另外测试是在真机Android5.1上进行的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity的四种启动模式与生命周期</title>
    <link href="https://zouchanglin.cn/11218.html"/>
    <id>https://zouchanglin.cn/11218.html</id>
    <published>2020-09-29T01:10:00.000Z</published>
    <updated>2020-11-03T01:11:42.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，Android中每个应用程序一开启就会创建一个任务栈，任务栈的ID是自增长的。最小化的时候，应用程序实际上是后台运行，任务栈是保留的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard 标准启动模式：这种模式下每开启一个新的Activity，都会被放置在任务栈的栈顶，不存在复用&lt;/li&gt;
&lt;li&gt;SingleTop 启动模式：这种模式下，如果栈顶已经存在了要开启的Activity，系统就不会重复创建了，而是利用这个已经存在的Activity，只复用栈顶的Activity&lt;/li&gt;
&lt;li&gt;SingleTask 启动模式：这种模式下，它要求当前Activity只会在任务栈存在一个实例，如果要开启的 Activity已经在任务栈中，系统会直接复用这个已经存在的Activity，并清空这个 Activity上面所有的栈引用，复用所有已存在的Activity&lt;/li&gt;
&lt;li&gt;SingleInstance 启动模式：这种模式下，系统会创建一个单独的任务栈，这个任务栈里只有它自己，并且在整个手机操作系统内存里，它是唯一的。比如打电话时的通话界面，全局唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后是Activity的生命周期，被迫退出时的信息状态保存，返回键监听，Activity之间的数据传递等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动开发" scheme="https://zouchanglin.cn/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>海量数据序列化协议Protobuf应用及核心源码分析</title>
    <link href="https://zouchanglin.cn/54440.html"/>
    <id>https://zouchanglin.cn/54440.html</id>
    <published>2020-09-28T10:09:30.000Z</published>
    <updated>2020-09-28T12:32:42.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。这里是Protobuf的官方手册 &lt;a href=&quot;https://developers.google.cn/protocol-buffers/docs/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.cn/protocol-buffers/docs/overview&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="高性能网络" scheme="https://zouchanglin.cn/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Protobuf" scheme="https://zouchanglin.cn/tags/Protobuf/"/>
    
      <category term="序列化" scheme="https://zouchanglin.cn/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>LinkHashMap与LRU</title>
    <link href="https://zouchanglin.cn/7002.html"/>
    <id>https://zouchanglin.cn/7002.html</id>
    <published>2020-09-22T23:26:30.000Z</published>
    <updated>2020-10-08T08:41:40.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Android 为我们提供了 LruCache 类，LruCache提供了一种使用LRU缓存的数据结构，里面本质还是对LinkedHashMap的封装。如果你深入研究 LinkedHashMap 的实现原理，就会发现其中就用到了双向链表这种数据结构。LRU (Least Recently Used) 的意思就是近期最少使用算法，它的核心思想就是会优先淘汰那些近期最少使用的缓存对象。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://zouchanglin.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="LRUCache" scheme="https://zouchanglin.cn/tags/LRUCache/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://zouchanglin.cn/2586075670.html"/>
    <id>https://zouchanglin.cn/2586075670.html</id>
    <published>2020-09-19T09:01:35.000Z</published>
    <updated>2020-09-19T13:53:26.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有一个设计模式帮助你的对象知悉现状，不会错过该对象感兴趣的事情，甚至在对象运行时可决定是否要继续被通知，观察者模式是JDK中使用最多的设计模式之一，非常有用。无论是在JDK还是Android开发当中，我们很容易发现观察者模式的运用之处，如我们经常遇到的点击事件，通过Button控件的诸如Listener 的方法，onClickListener就是观察/订阅到了按钮的点击事件，从而就可以执行对相应的逻辑，不同的动作会有不同的观察者，如单击、长按、连续两次点击等都有对应的Listener。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://zouchanglin.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Android" scheme="https://zouchanglin.cn/tags/Android/"/>
    
      <category term="观察者模式" scheme="https://zouchanglin.cn/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://zouchanglin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
